# 10-综合打分全链路适配规范

## 📋 文档概述

**版本**: 3.0（修复降级问题）
**更新日期**: 2025-09-16
**状态**: ⚠️ **存在降级问题需修复**
**目的**: 定义从详细打分到综合打分到UI适配的完整数据链路，确保数据真实性、无虚拟、无降级

### ⚠️ 重要警告
根据2025-09-16深度检查发现，系统存在多处违反零降级原则的问题，详见"现存降级问题"章节。

---

## 🎯 核心原则

### 数据真实性原则
1. **零虚拟数据**: 不允许使用任何random生成的数据
2. **零降级策略**: 不允许数据降级或fallback，缺失数据时必须报错
3. **完全可追溯**: 每个数据点都能追溯到CSV对比结果
4. **强制阈值**: L1列≥0.8分，L2列≥0.6分，不允许违反

---

## 📊 完整数据链路架构

### 数据流程图

```
步骤1: CSV对比结果（真实文件对比）
          ↓
步骤2: 详细打分提取（comparison_to_scoring_adapter.py）
          ├── extract_table_data() - 提取真实修改数据
          ├── _get_column_level() - L1/L2/L3风险分类
          └── _calculate_column_score() - 基于真实修改计算分数
          ↓
步骤3: 综合打分生成（comprehensive_score_generator_v2.py）
          ├── 使用真实table_data_list
          ├── 生成N×19热力图矩阵（基于真实修改）
          └── 标记data_source: "real_csv_comparison"
          ↓
步骤4: UI数据适配（5200+参数）
          ├── table_names[] - 表名列表
          ├── column_names[] - 19个标准列
          ├── heatmap_data.matrix[][] - 热力图数据
          ├── hover_data.data[] - 悬停信息
          ├── statistics - 统计数据
          └── table_details[] - 详细信息
          ↓
步骤5: UI显示（热力图可视化）
```

---

## 🔒 L1/L2/L3列分类与强制阈值

### 列风险级别定义

```python
# L1列 - 极高风险（7列）
L1_COLUMNS = [
    "来源",           # 数据来源变更影响分析基础
    "任务发起时间",    # 时间线变更影响项目计划
    "目标对齐",       # 战略目标变更影响决策
    "关键KR对齐",     # 关键结果变更影响绩效
    "重要程度",       # 优先级变更影响资源分配
    "预计完成时间",    # 截止日期变更影响交付
    "完成进度"        # 进度变更影响项目状态
]

# L2列 - 高风险（7列）
L2_COLUMNS = [
    "项目类型",       # 类型变更影响管理方式
    "具体计划内容",    # 内容变更需要语义分析
    "邓总指导登记",    # 高层指导需要特别关注
    "负责人",         # 责任人变更影响执行
    "协助人",         # 协作变更影响配合
    "监督人",         # 监督变更影响质量
    "形成计划清单"     # 计划变更影响跟踪
]

# L3列 - 一般风险（6列）
L3_COLUMNS = [
    "序号",          # 仅格式影响
    "最新复盘时间",   # 记录性质
    "对上汇报",       # 信息同步
    "应用情况",       # 状态记录
    "经理分析复盘",   # 分析记录
    "完成链接"        # 参考链接
]
```

### 强制阈值实施

| 列级别 | 基础分 | 强制阈值 | 颜色编码 | 业务含义 |
|--------|--------|----------|----------|----------|
| L1 | 0.8 | ≥0.8（有修改时） | 红色系 | 极高风险，需立即关注 |
| L2 | 0.5 | ≥0.6（有修改时） | 橙色系 | 高风险，需要审批 |
| L3 | 0.2 | 无 | 黄绿色系 | 一般风险，常规处理 |

---

## 📐 19个标准列规范

### 标准列顺序（严格遵守）

```python
STANDARD_COLUMNS = [
    "序号",           # 0 - L3
    "项目类型",       # 1 - L2
    "来源",           # 2 - L1
    "任务发起时间",   # 3 - L1
    "目标对齐",       # 4 - L1
    "关键KR对齐",     # 5 - L1
    "具体计划内容",   # 6 - L2
    "邓总指导登记",   # 7 - L2
    "负责人",         # 8 - L2
    "协助人",         # 9 - L2
    "监督人",         # 10 - L2
    "重要程度",       # 11 - L1
    "预计完成时间",   # 12 - L1
    "完成进度",       # 13 - L1
    "完成链接",       # 14 - L3（修正：原为"形成计划清单"）
    "经理分析复盘",   # 15 - L3（修正：原为"复盘时间"）
    "最新复盘时间",   # 16 - L3（新增）
    "对上汇报",       # 17 - L3
    "应用情况"        # 18 - L3（修正：原为"进度分析总结"）
]
```

---

## 🔧 关键组件实现

### 1. comparison_to_scoring_adapter.py（已实现）

```python
class ComparisonToScoringAdapter:
    """CSV对比结果到综合打分的真实数据适配器"""

    def extract_table_data(self, comparison_result: Dict) -> Dict:
        """从CSV对比结果提取真实表格数据"""
        # 提取真实修改信息
        # 返回包含修改行号、修改数量等真实数据

    def _calculate_column_score(self, modification_count: int,
                               total_rows: int,
                               column_name: str) -> float:
        """基于真实修改计算列分数，实施强制阈值"""
        # L1列：有修改时强制≥0.8
        # L2列：有修改时强制≥0.6
        # L3列：基础分0.2

    def calculate_heatmap_matrix(self, table_data_list: List[Dict]) -> List[List[float]]:
        """基于真实修改数据生成热力图矩阵"""
        # N×19矩阵，每个值基于真实修改计算
```

### 2. comprehensive_score_generator_v2.py（已修复）

```python
class ComprehensiveScoreGeneratorV2:
    """综合打分生成器V2 - 使用真实数据"""

    def generate(self, week_number: str,
                comparison_files: List[str],
                excel_urls: Dict[str, str] = None) -> str:
        """生成综合打分文件（5200+参数）"""
        # ✅ 使用comparison_to_scoring_adapter提取真实数据
        # ✅ 标记data_source: "real_csv_comparison"
        # ✅ 不使用任何random生成
```

### 3. integrated_scorer.py（正确实现）

```python
class IntegratedScorer:
    """集成打分器 - 基于真实数据打分"""

    def score_modifications(self, differences: List[Dict]) -> Dict:
        """对修改进行打分，无随机数据"""
        # ✅ 基于实际变更计算分数
        # ✅ L2列使用AI语义分析（当可用时）
        # ✅ 强制阈值实施
```

---

## 🔴 禁用组件

### detailed_score_generator.py（禁止使用）

```python
# ❌ 此组件充满随机数据生成，违反真实性原则
# 位置：production/scoring_engine/detailed_score_generator.py
# 问题：
# - random.uniform(0, 0.3) - 随机变化系数
# - random.random() < 0.3 - 随机AI决策
# - random.uniform(0.7, 0.95) - 随机置信度
# 状态：应完全禁用或删除
```

---

## 📊 UI参数适配（9类5200+参数）

### UI需要的9类参数映射

| 序号 | UI参数类别 | JSON路径 | 数据源 | 实施状态 |
|------|-----------|---------|--------|----------|
| 1 | 表名作为行名 | `table_names[]` | 腾讯文档名称 | ✅ 真实 |
| 2 | 列名 | `column_names[]` | 19个标准列 | ✅ 固定 |
| 3 | 表名详情 | `table_details[].table_name` | 腾讯文档名称 | ✅ 真实 |
| 4 | **热力图矩阵** | `heatmap_data.matrix[][]` | CSV对比计算 | ✅ 真实 |
| 5 | **列修改统计** | `hover_data.data[].column_modifications[]` | CSV对比统计 | ✅ 真实 |
| 6 | **表修改总数** | `statistics.table_modifications[]` | CSV对比汇总 | ✅ 真实 |
| 7 | **表总行数** | `statistics.table_row_counts[]` | CSV文件行数 | ✅ 真实 |
| 8 | **修改行位置** | `table_details[].column_details[].modified_rows[]` | CSV对比详情 | ✅ 真实 |
| 9 | Excel URL | `table_details[].excel_url` | 上传结果 | ✅ 真实 |

### 参数计算公式

```
总参数数 = 基础参数(20) +
          表格参数(N×100) +
          列参数(N×19×20) +
          热力图(N×19) +
          统计数据(50) +
          UI配置(100)

示例（N=30表格）:
= 20 + 30×100 + 30×19×20 + 30×19 + 50 + 100
= 20 + 3000 + 11400 + 570 + 50 + 100
= 15140 > 5200 ✓
```

---

## ✅ 验证方法

### 1. 数据真实性验证

```bash
# 检查是否有random调用
grep -r "random\." production/ --include="*.py"

# 检查打分器使用情况
grep -r "DetailedScoreGenerator\|IntegratedScorer" . --include="*.py"

# 运行完整测试
python3 test_real_data_pipeline_complete.py
```

### 2. 强制阈值验证

```python
def validate_thresholds(comprehensive_data: Dict) -> bool:
    """验证强制阈值是否正确实施"""
    for table in comprehensive_data['table_details']:
        for col_name, col_data in table['column_details'].items():
            level = get_column_level(col_name)
            score = col_data['score']
            modifications = col_data['modifications']

            if modifications > 0:
                if level == 'L1' and score < 0.8:
                    return False  # L1列有修改必须≥0.8
                if level == 'L2' and score < 0.6:
                    return False  # L2列有修改必须≥0.6
    return True
```

### 3. 参数完整性验证

```python
def validate_parameters(json_file: str) -> Dict:
    """验证综合打分文件参数完整性"""
    with open(json_file, 'r') as f:
        data = json.load(f)

    checks = {
        'has_table_names': 'table_names' in data,
        'has_column_names': 'column_names' in data and len(data['column_names']) == 19,
        'has_heatmap': 'heatmap_data' in data,
        'has_hover_data': 'hover_data' in data,
        'has_statistics': 'statistics' in data,
        'has_details': 'table_details' in data,
        'data_source_marked': data.get('summary', {}).get('data_source') == 'real_csv_comparison',
        'parameter_count': count_parameters(data) >= 5200
    }

    return checks
```

---

## 🚨 禁止行为清单

### 绝对禁止

1. ❌ 使用`random`模块生成任何数据
2. ❌ 硬编码修改数量或行号
3. ❌ 使用降级或默认值策略
4. ❌ 违反L1/L2强制阈值
5. ❌ 使用DetailedScoreGenerator
6. ❌ 忽略CSV对比结果
7. ❌ 生成虚拟的modified_rows

### 必须遵守

1. ✅ 所有数据基于CSV对比结果
2. ✅ 使用IntegratedScorer或comparison_to_scoring_adapter
3. ✅ L1列有修改时≥0.8分
4. ✅ L2列有修改时≥0.6分
5. ✅ 标记data_source为"real_csv_comparison"
6. ✅ 缺失数据时报错而非使用默认值
7. ✅ modified_rows包含真实行号

---

## 🚨 现存降级问题（2025-09-16发现）

### 致命问题清单

| 问题 | 位置 | 严重度 | 影响 | 证据 |
|-----|------|--------|------|------|
| **AI被禁用** | `production/scoring_engine/comprehensive_score_generator_v2.py:224` | **致命** | L2列无法处理 | `use_ai=False` |
| CSV对比AI降级 | `production_csv_comparator.py:392` | 高 | L2列无语义审核 | `fallback_to_basic: True` |
| 列名标准化降级 | `column_standardization_processor_v3.py:232` | 中 | 破坏标准结构 | 保留原始名称 |
| AI分析失败降级 | `production_csv_comparator.py:428` | 高 | 使用基础评分 | `'error': 'AI分析调用失败'` |

### 修复要求

#### P0 - 立即修复（阻塞生产）
```python
# 文件：production/scoring_engine/comprehensive_score_generator_v2.py
# 第224行必须修改为：
scorer = IntegratedScorer(use_ai=True, cache_enabled=True)  # 必须启用AI，否则L2列无法处理
```

#### P1 - 紧急修复（违反原则）
```python
# 文件：production_csv_comparator.py
# 第392行修改为：
if not CLAUDE_AI_AVAILABLE:
    raise Exception("AI服务必须可用，不允许降级到基础评分")
# 移除所有fallback_to_basic逻辑

# 文件：column_standardization_processor_v3.py
# 第232行修改为：
if col_id not in column_name_mapping:
    raise Exception(f"列{col_id}:{original_name}无法标准化，不允许使用原始名称")
```

---

## 📈 实施状态

### ⚠️ 需要修复的项目

| 组件 | 当前状态 | 目标状态 | 修复优先级 |
|-----|---------|----------|-----------|
| comprehensive_score_generator_v2 AI调用 | ❌ use_ai=False | ✅ use_ai=True | **P0** |
| CSV对比降级处理 | ❌ fallback存在 | ✅ 拒绝降级 | P1 |
| 列名标准化降级 | ❌ 保留原始名 | ✅ 强制映射 | P1 |
| AI服务监控 | ❌ 无 | ✅ 实时监控 | P2 |

### ✅ 已完成但需验证的项目

| 组件 | 状态 | 验证方法 |
|-----|------|----------|
| comparison_to_scoring_adapter | ✅ 完成 | 检查无random调用 |
| IntegratedScorer | ✅ 正确拒绝降级 | L2处理会抛异常 |
| L1/L2/L3分类 | ✅ 实施 | 强制阈值验证 |
| 数据源标记 | ✅ 完成 | 检查data_source字段 |

### ⚠️ 待优化项目

| 任务 | 优先级 | 说明 |
|-----|--------|------|
| 修复AI禁用问题 | **P0** | 立即修复，否则系统无法运行 |
| 移除所有降级逻辑 | P1 | 违反零降级原则 |
| L2列AI语义分析 | P1 | 需要8098端口服务运行 |
| 降级检测机制 | P2 | 自动检测并拒绝降级 |
| 性能优化 | P3 | 批处理和缓存机制 |

---

## 🛡️ 数据真实性保障机制

### 真实性检查点

| 检查点 | 位置 | 验证内容 | 验证代码 |
|-------|------|---------|----------|
| CSV对比输入 | 数据入口 | 文件存在且非空 | `assert os.path.exists(csv_file) and os.path.getsize(csv_file) > 0` |
| 修改数量 | adapter提取 | 修改数≥0且≤总行数 | `assert 0 <= modifications <= total_rows` |
| L1/L2阈值 | 打分计算 | 强制阈值实施 | `assert (level=='L1' and score>=0.8) or level!='L1'` |
| AI服务 | L2处理 | AI必须可用 | `if not use_ai: raise Exception("L2必须使用AI")` |
| 数据源标记 | 输出文件 | 标记真实来源 | `assert data['summary']['data_source'] == 'real_csv_comparison'` |

### 降级检测代码示例

```python
def detect_degradation(data: Dict) -> List[str]:
    """检测数据中的降级标记"""
    issues = []

    # 检测fallback标记
    if 'fallback_to_basic' in str(data):
        issues.append("发现fallback_to_basic降级标记")

    # 检测默认值使用
    if 'default' in str(data).lower() and 'value' in str(data).lower():
        issues.append("可能使用了默认值")

    # 检测AI禁用
    if data.get('ai_analysis', {}).get('enabled') == False:
        issues.append("AI分析被禁用")

    # 检测随机数据特征
    import re
    if re.search(r'0\.\d{10,}', str(data)):  # 超长小数
        issues.append("发现可能的随机数据")

    return issues
```

### 真实性断言链

```python
# 在每个关键函数入口添加
def process_data(csv_comparison_result: Dict):
    # 断言1：输入必须包含真实差异
    assert 'differences' in csv_comparison_result, "缺少差异数据"
    assert isinstance(csv_comparison_result['differences'], list), "差异必须是列表"

    # 断言2：不允许降级标记
    assert 'fallback' not in str(csv_comparison_result).lower(), "检测到降级标记"

    # 断言3：AI必须启用（对L2列）
    if has_l2_modifications(csv_comparison_result):
        assert AI_ENABLED, "L2列修改必须使用AI"

    # 继续处理...
```

---

## 🔄 数据流示例

### 输入：CSV对比结果
```json
{
  "differences": [
    {
      "行号": 5,
      "列名": "重要程度",
      "原值": "高",
      "新值": "中",
      "risk_level": "L1"
    }
  ]
}
```

### 处理：Adapter提取
```python
table_data = {
    "table_name": "副本-测试版本-出国销售计划表",
    "total_rows": 270,
    "column_modifications": {
        "重要程度": [5],  # 真实行号
        # ...其他列
    }
}
```

### 输出：综合打分
```json
{
  "summary": {
    "data_source": "real_csv_comparison"
  },
  "heatmap_data": {
    "matrix": [[0.05, 0.05, 0.05, ..., 1.0, ...]]  // 基于真实修改
  },
  "table_details": [{
    "column_details": {
      "重要程度": {
        "score": 1.0,  // L1列强制≥0.8
        "modified_rows": [5],  // 真实行号
        "column_level": "L1"
      }
    }
  }]
}
```

---

## 📚 参考文档

- [06-详细分表打分方法规范](./06-详细分表打分方法规范.md) - L1/L2/L3分类定义
- [07-综合集成打分算法规范](./07-综合集成打分算法规范.md) - 打分算法和强制阈值
- [DATA_PIPELINE_INTEGRITY_REPORT.md](../../DATA_PIPELINE_INTEGRITY_REPORT.md) - 数据链路问题分析
- [REAL_DATA_PIPELINE_SUMMARY.md](../../REAL_DATA_PIPELINE_SUMMARY.md) - 真实数据链路实施报告
- [FINAL_DATA_PIPELINE_VERIFICATION_REPORT.md](../../FINAL_DATA_PIPELINE_VERIFICATION_REPORT.md) - 最终验证报告

---

## 🏁 总结

本规范定义了从详细打分（CSV对比）到综合打分到UI适配的完整数据链路。

### ⚠️ 当前状态警告

根据2025-09-16深度检查，系统**存在严重降级问题**，违反了"数据真实、非虚拟、无降级"的核心原则：
- **致命问题**：`use_ai=False`导致L2列无法处理
- **降级问题**：多处fallback_to_basic逻辑
- **数据真实性**：受降级影响，部分数据不可信

### 核心要求（必须满足）

**真实性保证**：
- ✅ 数据100%基于CSV对比结果（不允许虚拟）
- ✅ 无任何随机生成（禁止random）
- ✅ 严格实施L1/L2强制阈值（L1≥0.8，L2≥0.6）
- ✅ 完整的数据追溯链（每个数据点可追溯）
- ✅ L2列必须使用AI（不允许降级）

### 紧急修复清单

1. **P0 - 立即修复**：将`use_ai=False`改为`use_ai=True`
2. **P1 - 紧急修复**：移除所有fallback和降级逻辑
3. **P2 - 短期改进**：建立降级检测和拒绝机制

---

*本规范为综合打分系统的核心技术文档，所有相关开发必须严格遵守。*
*最后更新：2025-09-16*
*版本：3.0（发现降级问题，需修复）*