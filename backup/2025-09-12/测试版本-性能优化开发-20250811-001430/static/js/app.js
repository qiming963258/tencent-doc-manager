/**\n * 腾讯文档自动化服务 - 主应用逻辑\n * 现代SPA架构，状态管理，路由系统，性能优化\n * 集成组件系统和API客户端\n */\n\n/* ===== 应用状态管理器 ===== */\nclass AppStateManager {\n  constructor() {\n    this.state = {\n      // 用户状态\n      user: {\n        username: localStorage.getItem('username') || '',\n        isLoggedIn: false,\n        cookies: ''\n      },\n      \n      // UI状态\n      ui: {\n        theme: localStorage.getItem('app-theme') || 'light',\n        currentView: 'settings',\n        loading: false,\n        sidebar: {\n          collapsed: localStorage.getItem('sidebar-collapsed') === 'true'\n        },\n        modals: {\n          settings: false,\n          help: false,\n          about: false\n        }\n      },\n      \n      // 业务状态\n      documents: {\n        downloadQueue: [],\n        uploadQueue: [],\n        history: [],\n        currentDoc: null\n      },\n      \n      // 系统状态\n      system: {\n        online: navigator.onLine,\n        apiHealth: null,\n        pendingRequests: 0,\n        lastSync: null\n      }\n    };\n    \n    this.listeners = new Map();\n    this.middlewares = [];\n    this.initializeState();\n  }\n  \n  initializeState() {\n    // 检查用户登录状态\n    if (this.state.user.username) {\n      this.state.user.isLoggedIn = true;\n    }\n    \n    // 监听网络状态\n    window.addEventListener('online', () => {\n      this.setState('system.online', true);\n    });\n    \n    window.addEventListener('offline', () => {\n      this.setState('system.online', false);\n    });\n    \n    // 监听API请求状态\n    window.addEventListener('api:stateChange', (event) => {\n      this.setState('system.pendingRequests', event.detail.pendingCount);\n    });\n  }\n  \n  // 获取状态\n  getState(path) {\n    if (!path) return this.state;\n    \n    return path.split('.').reduce((obj, key) => obj && obj[key], this.state);\n  }\n  \n  // 设置状态\n  setState(path, value, options = {}) {\n    const keys = path.split('.');\n    const lastKey = keys.pop();\n    const target = keys.reduce((obj, key) => {\n      if (!obj[key] || typeof obj[key] !== 'object') {\n        obj[key] = {};\n      }\n      return obj[key];\n    }, this.state);\n    \n    const oldValue = target[lastKey];\n    \n    // 执行中间件\n    for (const middleware of this.middlewares) {\n      const result = middleware(path, value, oldValue, this.state);\n      if (result !== undefined) {\n        value = result;\n      }\n    }\n    \n    target[lastKey] = value;\n    \n    // 触发变更事件\n    this.notifyListeners(path, value, oldValue, options);\n    \n    // 持久化特定状态\n    this.persistState(path, value);\n  }\n  \n  // 批量更新状态\n  batchUpdate(updates, options = {}) {\n    const oldState = JSON.parse(JSON.stringify(this.state));\n    \n    Object.entries(updates).forEach(([path, value]) => {\n      const keys = path.split('.');\n      const lastKey = keys.pop();\n      const target = keys.reduce((obj, key) => {\n        if (!obj[key] || typeof obj[key] !== 'object') {\n          obj[key] = {};\n        }\n        return obj[key];\n      }, this.state);\n      \n      target[lastKey] = value;\n    });\n    \n    // 触发批量更新事件\n    this.notifyListeners('*', this.state, oldState, { batch: true, ...options });\n  }\n  \n  // 添加状态监听器\n  subscribe(path, callback) {\n    if (!this.listeners.has(path)) {\n      this.listeners.set(path, []);\n    }\n    this.listeners.get(path).push(callback);\n    \n    // 返回取消订阅函数\n    return () => {\n      const callbacks = this.listeners.get(path);\n      if (callbacks) {\n        const index = callbacks.indexOf(callback);\n        if (index > -1) {\n          callbacks.splice(index, 1);\n        }\n      }\n    };\n  }\n  \n  // 通知监听器\n  notifyListeners(path, newValue, oldValue, options = {}) {\n    // 通知精确路径监听器\n    if (this.listeners.has(path)) {\n      this.listeners.get(path).forEach(callback => {\n        callback(newValue, oldValue, path, options);\n      });\n    }\n    \n    // 通知通配符监听器\n    if (this.listeners.has('*')) {\n      this.listeners.get('*').forEach(callback => {\n        callback(this.state, null, path, options);\n      });\n    }\n    \n    // 通知父路径监听器（如 'user' 监听 'user.username' 的变化）\n    const pathParts = path.split('.');\n    for (let i = pathParts.length - 1; i > 0; i--) {\n      const parentPath = pathParts.slice(0, i).join('.');\n      if (this.listeners.has(parentPath)) {\n        const parentValue = this.getState(parentPath);\n        this.listeners.get(parentPath).forEach(callback => {\n          callback(parentValue, null, parentPath, { ...options, childChange: true });\n        });\n      }\n    }\n  }\n  \n  // 添加中间件\n  addMiddleware(middleware) {\n    this.middlewares.push(middleware);\n  }\n  \n  // 持久化状态\n  persistState(path, value) {\n    const persistPaths = {\n      'user.username': 'username',\n      'ui.theme': 'app-theme',\n      'ui.sidebar.collapsed': 'sidebar-collapsed'\n    };\n    \n    if (persistPaths[path]) {\n      localStorage.setItem(persistPaths[path], value);\n    }\n  }\n}\n\n/* ===== 路由管理器 ===== */\nclass Router {\n  constructor(stateManager) {\n    this.stateManager = stateManager;\n    this.routes = new Map();\n    this.currentRoute = null;\n    this.history = [];\n    \n    this.setupEventListeners();\n  }\n  \n  setupEventListeners() {\n    // 监听浏览器前进后退\n    window.addEventListener('popstate', (event) => {\n      const route = event.state?.route || 'settings';\n      this.navigateTo(route, { skipHistory: true });\n    });\n  }\n  \n  // 注册路由\n  register(path, component, options = {}) {\n    this.routes.set(path, {\n      component,\n      options,\n      name: options.name || path\n    });\n  }\n  \n  // 导航到路由\n  navigateTo(path, options = {}) {\n    const route = this.routes.get(path);\n    if (!route) {\n      console.warn(`Route \"${path}\" not found`);\n      return;\n    }\n    \n    // 执行路由守卫\n    if (!this.canNavigate(path, options)) {\n      return;\n    }\n    \n    // 清理当前路由\n    if (this.currentRoute && this.currentRoute.component.onLeave) {\n      this.currentRoute.component.onLeave();\n    }\n    \n    // 更新历史记录\n    if (!options.skipHistory) {\n      this.history.push(path);\n      window.history.pushState({ route: path }, '', `#${path}`);\n    }\n    \n    // 更新状态\n    this.stateManager.setState('ui.currentView', path);\n    this.currentRoute = { path, ...route };\n    \n    // 激活新路由\n    if (route.component.onEnter) {\n      route.component.onEnter(options);\n    }\n    \n    // 触发路由变化事件\n    window.dispatchEvent(new CustomEvent('route:change', {\n      detail: { from: this.history[this.history.length - 2], to: path, options }\n    }));\n  }\n  \n  // 路由守卫\n  canNavigate(path, options) {\n    const route = this.routes.get(path);\n    if (!route) return false;\n    \n    // 检查路由权限\n    if (route.options.requireAuth && !this.stateManager.getState('user.isLoggedIn')) {\n      // 显示登录提示\n      window.Components.Toast.warning('请先设置用户信息和Cookies');\n      this.navigateTo('settings');\n      return false;\n    }\n    \n    // 执行自定义守卫\n    if (route.options.beforeEnter) {\n      return route.options.beforeEnter(path, options);\n    }\n    \n    return true;\n  }\n  \n  // 获取当前路由\n  getCurrentRoute() {\n    return this.currentRoute;\n  }\n  \n  // 后退\n  back() {\n    if (this.history.length > 1) {\n      this.history.pop(); // 移除当前路由\n      const previousRoute = this.history[this.history.length - 1];\n      this.navigateTo(previousRoute, { skipHistory: true });\n      window.history.back();\n    }\n  }\n}\n\n/* ===== 视图管理器 ===== */\nclass ViewManager {\n  constructor(stateManager, router) {\n    this.stateManager = stateManager;\n    this.router = router;\n    this.views = new Map();\n    this.currentView = null;\n    \n    this.setupViews();\n  }\n  \n  setupViews() {\n    // 注册视图\n    this.registerView('settings', {\n      title: '设置',\n      icon: 'bi-gear',\n      render: () => this.renderSettingsView(),\n      onEnter: () => this.loadUserSettings(),\n      onLeave: () => this.saveUserSettings()\n    });\n    \n    this.registerView('download', {\n      title: '下载文档',\n      icon: 'bi-cloud-download',\n      requireAuth: true,\n      render: () => this.renderDownloadView()\n    });\n    \n    this.registerView('upload', {\n      title: '上传文档',\n      icon: 'bi-cloud-upload',\n      requireAuth: true,\n      render: () => this.renderUploadView()\n    });\n    \n    this.registerView('analyze', {\n      title: '分析文档',\n      icon: 'bi-graph-up',\n      render: () => this.renderAnalyzeView()\n    });\n    \n    this.registerView('history', {\n      title: '历史记录',\n      icon: 'bi-clock-history',\n      requireAuth: true,\n      render: () => this.renderHistoryView(),\n      onEnter: () => this.loadHistory()\n    });\n  }\n  \n  registerView(name, view) {\n    this.views.set(name, view);\n    this.router.register(name, view, view);\n  }\n  \n  /* ===== 视图渲染方法 ===== */\n  renderSettingsView() {\n    const { user } = this.stateManager.getState();\n    \n    return `\n      <div class=\"view-settings animate-fadeInUp\">\n        <div class=\"container\">\n          <h1 class=\"text-3xl font-bold mb-8\">设置</h1>\n          \n          <div class=\"grid lg:grid-cols-3 gap-6\">\n            <div class=\"lg:col-span-2\">\n              <div class=\"card\">\n                <div class=\"card-body\">\n                  <h2 class=\"text-xl font-semibold mb-6\">用户配置</h2>\n                  \n                  <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"username\">\n                      <i class=\"bi bi-person\"></i>\n                      用户名\n                    </label>\n                    <input \n                      type=\"text\" \n                      id=\"username\" \n                      class=\"form-input\" \n                      placeholder=\"输入您的用户名\"\n                      value=\"${user.username}\"\n                    >\n                  </div>\n                  \n                  <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"cookies\">\n                      <i class=\"bi bi-key\"></i>\n                      腾讯文档 Cookies\n                    </label>\n                    <textarea \n                      id=\"cookies\" \n                      class=\"form-textarea\" \n                      rows=\"4\"\n                      placeholder=\"从浏览器F12开发者工具获取cookies，格式：name1=value1; name2=value2\"\n                    >${user.cookies}</textarea>\n                    <small class=\"text-muted mt-1\">\n                      <i class=\"bi bi-info-circle\"></i>\n                      Cookies用于访问需要登录的文档，将被安全加密存储\n                    </small>\n                  </div>\n                  \n                  <div class=\"flex gap-3\">\n                    <button \n                      class=\"btn btn-primary\" \n                      onclick=\"app.saveSettings()\"\n                      data-component=\"Button\"\n                      data-options='{\"loading\": false}'\n                    >\n                      <i class=\"bi bi-save\"></i>\n                      保存设置\n                    </button>\n                    \n                    <button \n                      class=\"btn btn-outline\" \n                      onclick=\"app.testConnection()\"\n                    >\n                      <i class=\"bi bi-wifi\"></i>\n                      测试连接\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <div class=\"card\">\n                <div class=\"card-body text-center\">\n                  <i class=\"bi bi-shield-check text-4xl text-success mb-4\"></i>\n                  <h3 class=\"font-semibold mb-2\">安全保护</h3>\n                  <p class=\"text-sm text-muted\">您的Cookies将使用加密算法安全存储</p>\n                </div>\n              </div>\n              \n              <div class=\"card mt-6\">\n                <div class=\"card-body text-center\">\n                  <i class=\"bi bi-lightbulb text-4xl text-warning mb-4\"></i>\n                  <h3 class=\"font-semibold mb-2\">使用提示</h3>\n                  <p class=\"text-sm text-muted\">首次使用需要配置用户名和Cookies才能使用完整功能</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  renderDownloadView() {\n    return `\n      <div class=\"view-download animate-fadeInUp\">\n        <div class=\"container\">\n          <h1 class=\"text-3xl font-bold mb-8\">下载文档</h1>\n          \n          <div class=\"card\">\n            <div class=\"card-body\">\n              <div class=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"downloadUrl\">\n                      <i class=\"bi bi-link-45deg\"></i>\n                      文档URL\n                    </label>\n                    <input \n                      type=\"text\" \n                      id=\"downloadUrl\" \n                      class=\"form-input\" \n                      placeholder=\"https://docs.qq.com/sheet/...\"\n                    >\n                  </div>\n                  \n                  <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"exportFormat\">\n                      <i class=\"bi bi-file-earmark\"></i>\n                      导出格式\n                    </label>\n                    <select id=\"exportFormat\" class=\"form-select\">\n                      <option value=\"excel\">Excel (.xlsx)</option>\n                      <option value=\"csv\">CSV (.csv)</option>\n                    </select>\n                  </div>\n                  \n                  <button \n                    class=\"btn btn-primary btn-lg\" \n                    onclick=\"app.downloadDocument()\"\n                    id=\"downloadBtn\"\n                  >\n                    <i class=\"bi bi-download\"></i>\n                    开始下载\n                  </button>\n                </div>\n                \n                <div>\n                  <div class=\"bg-gray-50 rounded-lg p-6\">\n                    <h3 class=\"font-semibold mb-4\">下载状态</h3>\n                    <div id=\"downloadStatus\" class=\"hidden\">\n                      <div class=\"flex items-center mb-3\">\n                        <div class=\"spinner mr-3\"></div>\n                        <span>正在下载...</span>\n                      </div>\n                      <div class=\"progress\">\n                        <div class=\"progress-bar\" id=\"downloadProgress\" style=\"width: 0%\"></div>\n                      </div>\n                    </div>\n                    <div id=\"downloadIdle\" class=\"text-muted text-center py-8\">\n                      <i class=\"bi bi-download text-4xl mb-3 opacity-50\"></i>\n                      <p>输入文档URL开始下载</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- 下载队列 -->\n          <div class=\"card mt-6\" id=\"downloadQueue\" style=\"display: none;\">\n            <div class=\"card-header\">\n              <h2 class=\"font-semibold\">下载队列</h2>\n            </div>\n            <div class=\"card-body\" id=\"downloadQueueList\">\n              <!-- 队列项目 -->\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  renderUploadView() {\n    return `\n      <div class=\"view-upload animate-fadeInUp\">\n        <div class=\"container\">\n          <h1 class=\"text-3xl font-bold mb-8\">上传文档</h1>\n          \n          <div class=\"card\">\n            <div class=\"card-body\">\n              <div id=\"fileUploadArea\"></div>\n            </div>\n          </div>\n          \n          <!-- 上传队列 -->\n          <div class=\"card mt-6\" id=\"uploadQueue\" style=\"display: none;\">\n            <div class=\"card-header\">\n              <h2 class=\"font-semibold\">上传队列</h2>\n            </div>\n            <div class=\"card-body\" id=\"uploadQueueList\">\n              <!-- 队列项目 -->\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  renderAnalyzeView() {\n    return `\n      <div class=\"view-analyze animate-fadeInUp\">\n        <div class=\"container\">\n          <h1 class=\"text-3xl font-bold mb-8\">分析文档</h1>\n          \n          <div class=\"grid lg:grid-cols-2 gap-6\">\n            <div class=\"card\">\n              <div class=\"card-body\">\n                <h2 class=\"text-xl font-semibold mb-6\">选择文件</h2>\n                <div id=\"analyzeFileArea\"></div>\n              </div>\n            </div>\n            \n            <div class=\"card\" id=\"analysisResult\" style=\"display: none;\">\n              <div class=\"card-body\">\n                <h2 class=\"text-xl font-semibold mb-6\">分析结果</h2>\n                <div id=\"analysisContent\"></div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- 数据预览 -->\n          <div class=\"card mt-6\" id=\"dataPreview\" style=\"display: none;\">\n            <div class=\"card-header\">\n              <h2 class=\"font-semibold\">数据预览</h2>\n            </div>\n            <div class=\"card-body\">\n              <div id=\"previewTable\" class=\"overflow-auto max-h-96\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  renderHistoryView() {\n    const { history } = this.stateManager.getState('documents');\n    \n    return `\n      <div class=\"view-history animate-fadeInUp\">\n        <div class=\"container\">\n          <div class=\"flex items-center justify-between mb-8\">\n            <h1 class=\"text-3xl font-bold\">历史记录</h1>\n            <button \n              class=\"btn btn-outline\" \n              onclick=\"app.refreshHistory()\"\n              id=\"refreshHistoryBtn\"\n            >\n              <i class=\"bi bi-arrow-clockwise\"></i>\n              刷新\n            </button>\n          </div>\n          \n          <div class=\"card\">\n            <div class=\"card-body\">\n              <div id=\"historyList\">\n                ${this.renderHistoryList(history)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  renderHistoryList(history) {\n    if (!history || history.length === 0) {\n      return `\n        <div class=\"text-center py-12 text-muted\">\n          <i class=\"bi bi-clock-history text-4xl mb-3 opacity-50\"></i>\n          <p>暂无历史记录</p>\n        </div>\n      `;\n    }\n    \n    return history.map(item => `\n      <div class=\"history-item flex items-center justify-between p-4 border-b border-gray-200 hover:bg-gray-50 transition-colors\">\n        <div class=\"flex items-center gap-4\">\n          <i class=\"bi ${this.getOperationIcon(item.operation)} text-xl ${this.getOperationColor(item.operation)}\"></i>\n          <div>\n            <h3 class=\"font-medium\">${item.doc_name || '未命名文档'}</h3>\n            <p class=\"text-sm text-muted\">${item.doc_url || '本地文件'}</p>\n          </div>\n        </div>\n        <div class=\"text-right\">\n          <span class=\"text-sm text-muted\">${this.formatDate(item.created_at)}</span>\n          <div class=\"mt-1\">\n            <span class=\"status-indicator ${item.operation === 'download' ? 'info' : 'success'}\">\n              ${item.operation === 'download' ? '下载' : '上传'}\n            </span>\n          </div>\n        </div>\n      </div>\n    `).join('');\n  }\n  \n  getOperationIcon(operation) {\n    return operation === 'download' ? 'bi-download' : 'bi-upload';\n  }\n  \n  getOperationColor(operation) {\n    return operation === 'download' ? 'text-blue-500' : 'text-green-500';\n  }\n  \n  formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleString('zh-CN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n  \n  /* ===== 视图生命周期方法 ===== */\n  loadUserSettings() {\n    const username = localStorage.getItem('username');\n    if (username) {\n      document.getElementById('username').value = username;\n    }\n  }\n  \n  saveUserSettings() {\n    const username = document.getElementById('username')?.value;\n    if (username) {\n      this.stateManager.setState('user.username', username);\n    }\n  }\n  \n  async loadHistory() {\n    const username = this.stateManager.getState('user.username');\n    if (!username) return;\n    \n    try {\n      const response = await window.api.getHistory(username);\n      if (response.success) {\n        this.stateManager.setState('documents.history', response.data.history);\n      }\n    } catch (error) {\n      console.error('Failed to load history:', error);\n    }\n  }\n  \n  // 渲染当前视图\n  render() {\n    const currentView = this.stateManager.getState('ui.currentView');\n    const view = this.views.get(currentView);\n    \n    if (!view) {\n      console.warn(`View \"${currentView}\" not found`);\n      return '';\n    }\n    \n    return view.render();\n  }\n}\n\n/* ===== 主应用类 ===== */\nclass TencentDocApp {\n  constructor() {\n    this.stateManager = new AppStateManager();\n    this.router = new Router(this.stateManager);\n    this.viewManager = new ViewManager(this.stateManager, this.router);\n    \n    this.components = new Map();\n    this.isInitialized = false;\n    \n    this.init();\n  }\n  \n  async init() {\n    if (this.isInitialized) return;\n    \n    try {\n      // 等待DOM加载完成\n      if (document.readyState === 'loading') {\n        await new Promise(resolve => {\n          document.addEventListener('DOMContentLoaded', resolve);\n        });\n      }\n      \n      // 初始化应用\n      await this.initializeApp();\n      \n      // 标记为已初始化\n      this.isInitialized = true;\n      \n      console.log('腾讯文档自动化服务已启动');\n      \n    } catch (error) {\n      console.error('Failed to initialize app:', error);\n      this.showError('应用初始化失败: ' + error.message);\n    }\n  }\n  \n  async initializeApp() {\n    // 1. 检查API健康状态\n    await this.checkAPIHealth();\n    \n    // 2. 设置全局事件监听\n    this.setupEventListeners();\n    \n    // 3. 初始化UI组件\n    this.initializeComponents();\n    \n    // 4. 设置状态监听\n    this.setupStateListeners();\n    \n    // 5. 初始化路由\n    this.initializeRouter();\n    \n    // 6. 渲染应用\n    this.render();\n    \n    // 7. 启动定时任务\n    this.startBackgroundTasks();\n  }\n  \n  async checkAPIHealth() {\n    try {\n      const response = await window.api.healthCheck();\n      this.stateManager.setState('system.apiHealth', response.data);\n    } catch (error) {\n      this.stateManager.setState('system.apiHealth', null);\n      console.warn('API health check failed:', error);\n    }\n  }\n  \n  setupEventListeners() {\n    // 全局按键监听\n    document.addEventListener('keydown', (e) => {\n      this.handleGlobalKeydown(e);\n    });\n    \n    // 页面可见性变化\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden) {\n        // 页面重新可见时检查API健康状态\n        this.checkAPIHealth();\n      }\n    });\n    \n    // 窗口大小变化\n    window.addEventListener('resize', this.debounce(() => {\n      this.handleResize();\n    }, 250));\n  }\n  \n  handleGlobalKeydown(e) {\n    // Ctrl+S 保存设置\n    if (e.ctrlKey && e.key === 's') {\n      e.preventDefault();\n      if (this.stateManager.getState('ui.currentView') === 'settings') {\n        this.saveSettings();\n      }\n    }\n    \n    // ESC 关闭模态框\n    if (e.key === 'Escape') {\n      this.closeAllModals();\n    }\n  }\n  \n  handleResize() {\n    // 响应式处理\n    const isMobile = window.innerWidth < 768;\n    this.stateManager.setState('ui.isMobile', isMobile);\n  }\n  \n  initializeComponents() {\n    // 主题切换器\n    const themeToggle = new window.Components.ThemeToggle(\n      document.querySelector('#themeToggle'),\n      {\n        defaultTheme: this.stateManager.getState('ui.theme')\n      }\n    );\n    this.components.set('themeToggle', themeToggle);\n    \n    // 监听主题变化\n    themeToggle.on('themeChange', (data) => {\n      this.stateManager.setState('ui.theme', data.theme);\n    });\n  }\n  \n  setupStateListeners() {\n    // 监听当前视图变化\n    this.stateManager.subscribe('ui.currentView', (view) => {\n      this.render();\n      this.updateNavigation(view);\n    });\n    \n    // 监听用户状态变化\n    this.stateManager.subscribe('user', (user) => {\n      this.updateUserUI(user);\n    });\n    \n    // 监听系统状态变化\n    this.stateManager.subscribe('system.pendingRequests', (count) => {\n      this.updateLoadingState(count > 0);\n    });\n    \n    // 监听网络状态变化\n    this.stateManager.subscribe('system.online', (online) => {\n      this.handleNetworkChange(online);\n    });\n  }\n  \n  initializeRouter() {\n    // 从URL hash初始化路由\n    const hash = window.location.hash.substring(1) || 'settings';\n    this.router.navigateTo(hash, { skipHistory: true });\n  }\n  \n  startBackgroundTasks() {\n    // 定期检查API健康状态\n    setInterval(() => {\n      this.checkAPIHealth();\n    }, 5 * 60 * 1000); // 5分钟\n    \n    // 定期同步状态\n    setInterval(() => {\n      this.syncState();\n    }, 30 * 1000); // 30秒\n  }\n  \n  render() {\n    const mainContent = document.getElementById('mainContent');\n    if (!mainContent) {\n      console.error('Main content element not found');\n      return;\n    }\n    \n    // 渲染视图内容\n    const content = this.viewManager.render();\n    mainContent.innerHTML = content;\n    \n    // 重新初始化组件\n    this.initializeViewComponents();\n  }\n  \n  initializeViewComponents() {\n    const currentView = this.stateManager.getState('ui.currentView');\n    \n    switch (currentView) {\n      case 'upload':\n        this.initializeUploadComponents();\n        break;\n      case 'analyze':\n        this.initializeAnalyzeComponents();\n        break;\n    }\n    \n    // 重新初始化页面中的组件\n    window.Components.ComponentFactory.autoInit();\n  }\n  \n  initializeUploadComponents() {\n    const uploadArea = document.getElementById('fileUploadArea');\n    if (uploadArea) {\n      const fileUpload = new window.Components.FileUpload(uploadArea, {\n        accept: '.xlsx,.xls,.csv',\n        multiple: true,\n        maxSize: 50 * 1024 * 1024, // 50MB\n        onFileSelect: (files) => {\n          this.handleFileSelect(files);\n        },\n        onComplete: (response, files) => {\n          this.handleUploadComplete(response, files);\n        }\n      });\n      \n      this.components.set('fileUpload', fileUpload);\n    }\n  }\n  \n  initializeAnalyzeComponents() {\n    const analyzeArea = document.getElementById('analyzeFileArea');\n    if (analyzeArea) {\n      const fileUpload = new window.Components.FileUpload(analyzeArea, {\n        accept: '.xlsx,.xls',\n        multiple: false,\n        maxSize: 10 * 1024 * 1024, // 10MB\n        onFileSelect: (files) => {\n          this.handleAnalyzeFileSelect(files);\n        }\n      });\n      \n      this.components.set('analyzeFileUpload', fileUpload);\n    }\n  }\n  \n  /* ===== 业务方法 ===== */\n  async saveSettings() {\n    const usernameInput = document.getElementById('username');\n    const cookiesInput = document.getElementById('cookies');\n    \n    const username = usernameInput?.value.trim();\n    const cookies = cookiesInput?.value.trim();\n    \n    if (!username) {\n      window.Components.Toast.warning('请输入用户名');\n      return;\n    }\n    \n    if (!cookies) {\n      window.Components.Toast.warning('请输入Cookies');\n      return;\n    }\n    \n    try {\n      // 显示加载状态\n      this.setButtonLoading('saveSettingsBtn', true);\n      \n      const response = await window.api.saveCookies(username, cookies);\n      \n      if (response.success) {\n        // 更新状态\n        this.stateManager.batchUpdate({\n          'user.username': username,\n          'user.cookies': cookies,\n          'user.isLoggedIn': true\n        });\n        \n        window.Components.Toast.success('设置保存成功');\n      } else {\n        throw new Error(response.error || '保存失败');\n      }\n    } catch (error) {\n      window.Components.Toast.error(error.message);\n    } finally {\n      this.setButtonLoading('saveSettingsBtn', false);\n    }\n  }\n  \n  async downloadDocument() {\n    const urlInput = document.getElementById('downloadUrl');\n    const formatSelect = document.getElementById('exportFormat');\n    \n    const docUrl = urlInput?.value.trim();\n    const format = formatSelect?.value || 'excel';\n    const username = this.stateManager.getState('user.username');\n    \n    if (!docUrl) {\n      window.Components.Toast.warning('请输入文档URL');\n      return;\n    }\n    \n    if (!username) {\n      window.Components.Toast.warning('请先设置用户名');\n      this.router.navigateTo('settings');\n      return;\n    }\n    \n    try {\n      // 显示下载状态\n      this.showDownloadStatus(true);\n      \n      const response = await window.api.downloadDocument(docUrl, username, format);\n      \n      if (response.success) {\n        // 触发文件下载\n        this.downloadFile(response.data.file_name);\n        \n        // 添加到历史记录\n        this.addToHistory({\n          operation: 'download',\n          doc_url: docUrl,\n          doc_name: response.data.file_name,\n          created_at: new Date().toISOString()\n        });\n        \n        window.Components.Toast.success('文档下载成功');\n        \n        // 清空输入\n        urlInput.value = '';\n      } else {\n        throw new Error(response.error || '下载失败');\n      }\n    } catch (error) {\n      window.Components.Toast.error(error.message);\n    } finally {\n      this.showDownloadStatus(false);\n    }\n  }\n  \n  async testConnection() {\n    try {\n      this.setButtonLoading('testConnectionBtn', true);\n      \n      const response = await window.api.healthCheck();\n      \n      if (response.success) {\n        window.Components.Toast.success('连接测试成功');\n        this.stateManager.setState('system.apiHealth', response.data);\n      } else {\n        throw new Error('连接测试失败');\n      }\n    } catch (error) {\n      window.Components.Toast.error('连接测试失败: ' + error.message);\n    } finally {\n      this.setButtonLoading('testConnectionBtn', false);\n    }\n  }\n  \n  async refreshHistory() {\n    const username = this.stateManager.getState('user.username');\n    if (!username) return;\n    \n    try {\n      this.setButtonLoading('refreshHistoryBtn', true);\n      \n      const response = await window.api.getHistory(username);\n      \n      if (response.success) {\n        this.stateManager.setState('documents.history', response.data.history);\n        this.render(); // 重新渲染历史列表\n        window.Components.Toast.success('历史记录已更新');\n      }\n    } catch (error) {\n      window.Components.Toast.error('刷新失败: ' + error.message);\n    } finally {\n      this.setButtonLoading('refreshHistoryBtn', false);\n    }\n  }\n  \n  /* ===== 辅助方法 ===== */\n  setButtonLoading(buttonId, loading) {\n    const button = document.getElementById(buttonId);\n    if (!button) return;\n    \n    if (loading) {\n      button.disabled = true;\n      button.innerHTML = '<div class=\"spinner spinner-sm\"></div> 处理中...';\n    } else {\n      button.disabled = false;\n      // 恢复原始内容（这里简化处理）\n      button.innerHTML = button.dataset.originalText || button.textContent;\n    }\n  }\n  \n  showDownloadStatus(show) {\n    const statusEl = document.getElementById('downloadStatus');\n    const idleEl = document.getElementById('downloadIdle');\n    \n    if (statusEl) {\n      statusEl.classList.toggle('hidden', !show);\n    }\n    if (idleEl) {\n      idleEl.classList.toggle('hidden', show);\n    }\n  }\n  \n  downloadFile(filename) {\n    const link = document.createElement('a');\n    link.href = `/api/download_file/${encodeURIComponent(filename)}`;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  \n  addToHistory(item) {\n    const history = this.stateManager.getState('documents.history') || [];\n    history.unshift(item);\n    this.stateManager.setState('documents.history', history.slice(0, 50)); // 只保留最近50条\n  }\n  \n  updateNavigation(currentView) {\n    // 更新导航状态\n    document.querySelectorAll('.nav-link').forEach(link => {\n      const href = link.getAttribute('href')?.substring(1);\n      link.classList.toggle('active', href === currentView);\n    });\n  }\n  \n  updateUserUI(user) {\n    // 更新用户相关UI\n    const userDisplay = document.getElementById('userDisplay');\n    if (userDisplay && user.username) {\n      userDisplay.textContent = user.username;\n    }\n  }\n  \n  updateLoadingState(loading) {\n    // 更新全局加载状态\n    document.body.classList.toggle('app-loading', loading);\n  }\n  \n  handleNetworkChange(online) {\n    if (online) {\n      window.Components.Toast.success('网络连接已恢复');\n      this.checkAPIHealth();\n    } else {\n      window.Components.Toast.warning('网络连接已断开');\n    }\n  }\n  \n  showError(message) {\n    window.Components.Toast.error(message);\n  }\n  \n  closeAllModals() {\n    // 关闭所有模态框\n    document.querySelectorAll('.modal').forEach(modal => {\n      if (modal.style.display !== 'none') {\n        const component = this.components.get(modal.id);\n        if (component && component.hide) {\n          component.hide();\n        }\n      }\n    });\n  }\n  \n  syncState() {\n    // 同步关键状态到本地存储\n    const state = this.stateManager.getState();\n    sessionStorage.setItem('app-session', JSON.stringify({\n      timestamp: Date.now(),\n      view: state.ui.currentView,\n      user: state.user.username\n    }));\n  }\n  \n  debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n  \n  /* ===== 文件处理方法 ===== */\n  handleFileSelect(files) {\n    console.log('Files selected for upload:', files);\n    // 添加到上传队列\n    const uploadQueue = this.stateManager.getState('documents.uploadQueue') || [];\n    const newItems = files.map(file => ({\n      id: Date.now() + Math.random(),\n      file,\n      status: 'pending',\n      progress: 0\n    }));\n    \n    this.stateManager.setState('documents.uploadQueue', [...uploadQueue, ...newItems]);\n  }\n  \n  handleUploadComplete(response, files) {\n    console.log('Upload completed:', response, files);\n    window.Components.Toast.success(`成功上传 ${files.length} 个文件`);\n    \n    // 添加到历史记录\n    files.forEach(file => {\n      this.addToHistory({\n        operation: 'upload',\n        doc_name: file.name,\n        created_at: new Date().toISOString()\n      });\n    });\n  }\n  \n  async handleAnalyzeFileSelect(files) {\n    if (files.length === 0) return;\n    \n    const file = files[0];\n    \n    try {\n      const response = await window.api.analyzeDocument(file);\n      \n      if (response.success) {\n        this.displayAnalysisResult(response.data.analysis);\n        window.Components.Toast.success('文档分析完成');\n      }\n    } catch (error) {\n      window.Components.Toast.error('分析失败: ' + error.message);\n    }\n  }\n  \n  displayAnalysisResult(analysis) {\n    const resultEl = document.getElementById('analysisResult');\n    const contentEl = document.getElementById('analysisContent');\n    const previewEl = document.getElementById('dataPreview');\n    const previewTableEl = document.getElementById('previewTable');\n    \n    if (!resultEl || !contentEl) return;\n    \n    // 显示基本信息\n    contentEl.innerHTML = `\n      <div class=\"grid md:grid-cols-2 gap-4 mb-6\">\n        <div>\n          <h3 class=\"font-semibold mb-2\">基本信息</h3>\n          <ul class=\"text-sm space-y-1\">\n            <li><span class=\"text-muted\">文件名:</span> ${analysis.file_name}</li>\n            <li><span class=\"text-muted\">行数:</span> ${analysis.total_rows}</li>\n            <li><span class=\"text-muted\">列数:</span> ${analysis.total_columns}</li>\n          </ul>\n        </div>\n        <div>\n          <h3 class=\"font-semibold mb-2\">列信息</h3>\n          <div class=\"text-sm\">\n            ${analysis.columns.slice(0, 5).map(col => `<span class=\"inline-block bg-gray-100 px-2 py-1 rounded text-xs mr-1 mb-1\">${col}</span>`).join('')}\n            ${analysis.columns.length > 5 ? `<span class=\"text-muted\">...等${analysis.columns.length}列</span>` : ''}\n          </div>\n        </div>\n      </div>\n    `;\n    \n    resultEl.style.display = 'block';\n    \n    // 显示数据预览\n    if (analysis.preview && analysis.preview.length > 0 && previewEl && previewTableEl) {\n      const tableHtml = this.generatePreviewTable(analysis);\n      previewTableEl.innerHTML = tableHtml;\n      previewEl.style.display = 'block';\n    }\n  }\n  \n  generatePreviewTable(analysis) {\n    let html = '<table class=\"table w-full\"><thead><tr>';\n    \n    // 表头\n    analysis.columns.forEach(col => {\n      html += `<th class=\"px-4 py-2 text-left font-semibold border-b\">${col}</th>`;\n    });\n    html += '</tr></thead><tbody>';\n    \n    // 数据行（最多显示10行）\n    analysis.preview.slice(0, 10).forEach(row => {\n      html += '<tr class=\"hover:bg-gray-50\">';\n      analysis.columns.forEach(col => {\n        const value = row[col] || '';\n        html += `<td class=\"px-4 py-2 border-b text-sm\">${String(value).slice(0, 50)}${String(value).length > 50 ? '...' : ''}</td>`;\n      });\n      html += '</tr>';\n    });\n    \n    html += '</tbody></table>';\n    return html;\n  }\n}\n\n/* ===== 初始化应用 ===== */\nlet app;\n\n// DOM加载完成后初始化应用\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    app = new TencentDocApp();\n    window.app = app; // 导出到全局以便调试\n  });\n} else {\n  app = new TencentDocApp();\n  window.app = app;\n}\n\n// 导出应用类\nwindow.TencentDocApp = TencentDocApp;